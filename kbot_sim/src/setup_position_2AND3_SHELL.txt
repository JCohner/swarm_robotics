void setup_positions()
{
	int k = 0;
	int columns = (int)sqrt((num_robots * arena_width / arena_height));
	int rows = (int)(num_robots / columns);
	if (num_robots % columns) rows++;
	int horizontal_separation = 50;//align robots
	int vertical_separation = 50; //align robots
	int robot_positions[num_robots][2];
	int ret_vals[2];
	for (int i = 0;i < num_robots;i++)
	{
		int c = i % columns + 1;
		int r = i / columns + 1;
		// //int hr = rand() % (horizontal_separation / 2) + horizontal_separation / 4;
		// int x = c * horizontal_separation+1200;// + hr;
		// //int vr = rand() % (vertical_separation / 2) + vertical_separation / 4;
		// int y = r * vertical_separation+1200;// + vr;
		
		int x = (int) (2200.0 * (double) rand() / (RAND_MAX) + 50);
		int y = (int) (2200.0 * (double) rand() / (RAND_MAX) + 50);
	
		// ret_vals = check_unique(x,y,k, robot_positions);

		// robot_positions[k][0] = ret_vals[0];
		// robot_positions[k][1] = ret_vals[1];
		//if row is even number, indent it to form hex shape
		// if(r%2==0){
		// 	x = x + 25;
		// }
		robots[k] = new mykilobot();
		double t = rand() * 2 * PI / RAND_MAX;
		robots[k]->robot_init(x, y, t);
		// robots[k]->id=0;
		if(k<70)
		{
			robots[k]->id=0;
		}
		else if(k<140)
		{
			robots[k]->id=1;
		}
		else 
		{
			robots[k]->id=2;
		}
		k++;
	}

}